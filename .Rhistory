install.packages('knitr')
install.packages("knitr")
require(iris)
attach(iris)
library(knitr)
?optim
require(graphics)
fr <- function(x) {   ## Rosenbrock Banana function
x <- x[1]
y <- x[2]
z <- x[3]
x^2 + 3*y^2-x*y/10 + (z-1)^4/4
}
optim(c(-1.2,1), fr)
optim(c(0,0,1), fr)
fr(c(0,0,1))
require(graphics)
fr <- function(x) {   ## Rosenbrock Banana function
x <- x[1]
y <- x[2]
z <- x[3]
x^2 + 3*(y^2)-(x*y)/10 + (z-1)^4/4
}
fr(c(0,0,1))
fr(c(1,1,1))
a-c(1,1,1)
a=c(1,1,1)
a[1]
a[2]
a[3]
require(graphics)
fr <- function(x) {
x1 <- x[1]
y <- x[2]
z <- x[3]
x1^2 + 3*(y^2)-(x1*y)/10 + (z-1)^4/4
}
optim(c(0,0,1), fr)
source('C:/Users/pengc/Desktop/ST4240/tutorial/2/qn2 part3.R')
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
grr <- function(x) { ## Gradient of 'fr'
x1 <- x[1]
x2 <- x[2]
c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),
200 *      (x2 - x1 * x1))
}
optim(c(-1.2,1), fr)
fr <- function(x) {
x1 <- x[1]
y <- x[2]
z <- x[3]
x1^2 + 3*(y^2)-(x1*y)/10 + (z-1)^4/4
}
optim(c(0.5,0,1), fr)
source('C:/Users/pengc/Desktop/ST4240/tutorial/2/qn2 part3.R')
basin <- function(x) {
x1 <- x[1]
y <- x[2]
z <- x[3]
x1^2 + 3*(y^2)-(x1*y)/10 + (z-1)^4/4
}
# define the derivative for the basin function
derivative <- function(x) {
x1 <- x[1]
y <- x[2]
z <- x[3]
c(2*x1+y/10, 6*y-x/10,(z-1)^3)
}
# definition of the gradient descent method
gradient_descent <- function(func, derv, start, step=0.05, tol=1e-8) {
pt1 <- start
grdnt <- derv(pt1)
pt2 <- c(pt1[1] - step*grdnt[1], pt1[2] - step*grdnt[2],pt1[3] - step*grdnt[3])
while (abs(func(pt1)-func(pt2)) > tol) {
pt1 <- pt2
grdnt <- derv(pt1)
pt2 <- c(pt1[1] - step*grdnt[1], pt1[2] - step*grdnt[2],pt1[3] - step*grdnt[3])
print(func(pt2)) # print progress
}
pt2 # return the last point
}
# locate the minimum of the function using the Gradient Descent method
result <- gradient_descent(
basin, # the function to optimize
derivative, # the gradient of the function
c(0.5,0,1), # start point of the search
0.05, # step size (alpha)
1e-8) # relative tolerance for one step
# display a summary of the results
print(result) # coordinate of fucntion minimum
print(basin(result)) # response of fucntion minimum
setwd("C:/Users/pengc/Downloads")
rsconnect::setAccountInfo(name='ellie-pengchong-myntuc', token='0AD6D7119B693F006326425CCEB7075F', secret='bfgyoX+KUZUgrtCRAtfrS8y/ZLLX+M0pdsKGRogF')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='ellie-pengchong-myntuc', token='0AD6D7119B693F006326425CCEB7075F', secret='bfgyoX+KUZUgrtCRAtfrS8y/ZLLX+M0pdsKGRogF')
install.packages("shiny")
install.packages("ggplot2")
library(shiny)
runApp()
library(rsconnect)
deployApp()
install.packages(c("DT","Formula","TH.data", "XML", "bootstrap" , "cellranger","coin","crosstalk" ,"htmlwidgets" ))
deployApp()
deployApp()
install.packages(c("inum" ,"mongolite","libcoin","openssl","party","partykit","rJava","readxl" ,"rpart.plot"))
deployApp()
install.packages(c("shinyjs","xlsx","xlsxjars"))
deployApp()
setwd("C:/Users/pengc/Downloads/app")
runApp()
install.packages("htmltools")
install.packages("htmltools")
install.packages("mongolite")
install.packages("jsonlite")
fluidPage(
titlePanel("MyNTUC App Dashboard"),
sidebarPanel(
checkboxInput('android', 'Android'),
checkboxInput('ios', 'IOS')
),
mainPanel(
plotOutput('plot')
)
)
output$plot <- renderPlot({
}, height=700)
library(library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
library(shint)
library(shiny)
install.packages("shiny")
install.packages("shiny")
library(shiny)
runApp()
setwd("C:/Users/pengc/Desktop/BT3101/myNTUC")
library(shiny)
runApp()
runApp()
runApp()
setwd("C:/Users/pengc/Desktop/BT3101/myNTUC")
library(shiny)
runApp()
install.packages("jsonlite")
runApp()
attach(diamonds)
View(diamonds)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
